{"version":3,"sources":["Document.js","Trails.js","App.js","reportWebVitals.js","index.js"],"names":["Document","path","desc","format","className","src","alt","substr","concat","myConfig","nodeHighlightBehavior","directed","node","color","size","highlightStrokeColor","link","highlightColor","Trails","props","state","data","selectNode","this","nodes","filter","item","id","currentNode","forEach","console","log","config","Component","App","nextMemory","e","linkIndex","Math","floor","random","links","length","nextMem","target","nextLink","getLinks","setState","currentMemory","idFirstMem","firstLink","idMem","linksToReturn","source","push","memory","memId","onClick","transitionName","transitionAppear","transitionLeave","timeout","name","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2igBAgBeA,MAZf,YAAwC,IAArBC,EAAoB,EAApBA,KAAMC,EAAc,EAAdA,KAAMC,EAAQ,EAARA,OAC3B,OACI,sBAAKC,UAAU,WAAf,UACI,6BAAKF,IACO,QAAXC,EACG,qBAAKE,IAAK,gBAAkBJ,EAAO,OAAQK,IAAKJ,IAC9C,4BAAI,KAAuCK,OAAO,EAAE,KAAKC,OAAO,a,gBCN5EC,EAAW,CACbC,uBAAuB,EACvBC,UAAU,EACVC,KAAM,CACJC,MAAO,aACPC,KAAM,IACNC,qBAAsB,QAExBC,KAAM,CACJC,eAAgB,cA4CPC,E,kDAtCX,WAAYC,GAAO,IAAD,8BAChB,cAAMA,IAECC,MAAQ,CACbC,KAAMA,GAJQ,E,qDASR,IAAD,OAGDC,EADO,eAAQC,KAAKH,MAAMC,MACLG,MAAMC,QAAO,SAAAC,GAClC,OAAOA,EAAKC,KAAO,EAAKR,MAAMS,eASlC,OAPAN,EAAWO,SAAQ,SAAAH,GACfA,EAAKb,MAAQ,SAEjBiB,QAAQC,IAAIT,GAKR,cAAC,QAAD,CACAK,GAAG,WACHN,KAASE,KAAKH,MAAMC,KACpBW,OAASvB,Q,GA3BAwB,a,QC0DNC,E,kDAlEb,WAAYf,GAAO,IAAD,uBAChB,cAAMA,IAqBRgB,WAAa,SAAAC,GACX,IAAIC,EAAYC,KAAKC,MAAMD,KAAKE,SAAU,EAAKpB,MAAMqB,MAAMC,QAErDC,EAAU,EAAKvB,MAAMqB,MAAMJ,GAAWO,OACtCC,EAAW,EAAKC,SAASH,GAG/B,EAAKI,SAAS,CACZC,cAAeL,EACfF,MAAOI,KA7BT,IAAMI,EAAaX,KAAKC,MAAMD,KAAKE,SAAWnB,EAAKG,MAAMkB,QACnDQ,EAAY,EAAKJ,SAASG,GAHhB,OAIhB,EAAK7B,MAAQ,CAEX4B,cAAgBC,EAChBR,MAAQS,GAPM,E,qDAYTC,GACP,IAAIC,EAAgB,GAMpB,OALA/B,EAAKoB,MAAMZ,SAAQ,SAAAb,GACbA,EAAKqC,SAAWF,GAClBC,EAAcE,KAAKtC,MAGhBoC,I,+BAkBP,IAAMG,EAASlC,EAAKG,MAAMD,KAAKH,MAAM4B,eAC/BQ,EAAQjC,KAAKH,MAAMqB,MAAM,GAAGY,OAClC,OACE,sBAAKjD,UAAU,MAAf,UACE,wBAAQA,UAAU,aAAaqD,QAAWlC,KAAKY,WAA/C,SACE,cAAC,qBAAD,CACEuB,eAAiB,UACjBC,kBAAoB,EACpBC,iBAAmB,EACnBC,QAAS,IAJX,SAKE,cAAC,EAAD,CAEE5D,KAAQsD,EAAOtD,KACfC,KAAQqD,EAAOO,KACf3D,OAAUoD,EAAOpD,QAHVqD,OAQb,cAAC,EAAD,CACE5B,YAAe4B,W,GA1DPvB,aCGH8B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.9aca7274.chunk.js","sourcesContent":["import './Document.css'\r\nimport raw from 'raw.macro';\r\n\r\n\r\nfunction Document({path, desc, format}){\r\n    return(\r\n        <div className=\"souvenir\">\r\n            <h1>{desc}</h1>\r\n            {format === \"jpg\" ? \r\n                <img src={'../souvenirs/' + path + '.jpg'} alt={desc}></img> \r\n                : <p>{raw(`../public/souvenirs/${path}.txt`).substr(0,500).concat(\"...\")}</p>\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Document","import { Graph } from \"react-d3-graph\";\nimport {React, Component} from 'react';\nimport data from './souvenirs.json'\n\nconst myConfig = {\n    nodeHighlightBehavior: true,\n    directed: true,\n    node: {\n      color: \"lightgreen\",\n      size: 120,\n      highlightStrokeColor: \"blue\",\n    },\n    link: {\n      highlightColor: \"lightblue\",\n    },\n  };\n\n  \nclass Trails extends Component {\n    constructor(props){\n      super(props)\n\n        this.state = {\n        data: data,\n        };\n    };\n\n\n    render() {\n\n        let modData = { ...this.state.data }; //copy state.data\n        let selectNode = modData.nodes.filter(item => { //find node selected\n            return item.id === this.props.currentNode;\n        });\n        selectNode.forEach(item => {//set it to red\n            item.color = \"red\";\n        });\n        console.log(selectNode);\n        //this.setState({ data: modData });// change state.data\n\n\n        return(\n            <Graph\n            id=\"graph-id\"\n            data =  {this.state.data}\n            config= {myConfig}\n        />\n        )\n    }\n}\n\n\n\n\n\n\n    \nexport default Trails","import './App.css';\nimport data from './souvenirs.json'\nimport Document from './Document.js'\nimport Trails from './Trails.js'\n// import History from './History.js'\nimport {React, Component} from 'react';\nimport {CSSTransitionGroup} from 'react-transition-group'\n\n\nclass App extends Component {\n  constructor(props){\n    super(props)\n    const idFirstMem = Math.floor(Math.random() * data.nodes.length);\n    const firstLink = this.getLinks(idFirstMem);\n    this.state = {\n      // history : [idFirstSouvenir],\n      currentMemory : idFirstMem,\n      links : firstLink,\n    };\n  }\n    \n\n  getLinks(idMem){ \n    var linksToReturn = [];\n    data.links.forEach(link => {\n      if (link.source === idMem){\n        linksToReturn.push(link);\n      }\n    })\n    return linksToReturn;\n  }\n\n  nextMemory = e =>{\n    let linkIndex = Math.floor(Math.random()* this.state.links.length);\n    \n    const nextMem = this.state.links[linkIndex].target;\n    const nextLink = this.getLinks(nextMem);\n\n    //change currentMemory and current Link\n    this.setState({ \n      currentMemory: nextMem, \n      links: nextLink\n    })\n    \n  }\n\n  render() {\n    const memory = data.nodes[this.state.currentMemory]\n    const memId = this.state.links[0].source\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\" onClick = {this.nextMemory}>\n          <CSSTransitionGroup \n            transitionName = \"example\"\n            transitionAppear = {false}\n            transitionLeave = {false}\n            timeout={1000}>\n            <Document \n              key = {memId}\n              path = {memory.path}\n              desc = {memory.name}\n              format = {memory.format}\n            />\n          </CSSTransitionGroup>\n        </header>\n\n        <Trails\n          currentNode = {memId}\n        \n        />\n\n      </div>\n    );\n  }\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}